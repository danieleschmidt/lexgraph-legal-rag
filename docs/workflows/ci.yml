name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black mypy bandit safety pre-commit
        
    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files
        
    - name: Lint with Ruff
      run: ruff check src/ tests/ --output-format=github
      
    - name: Format check with Black
      run: black src/ tests/ --check --diff
      
    - name: Type check with MyPy
      run: mypy src/ --ignore-missing-imports
      
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt
      continue-on-error: true
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-xdist
        
    - name: Run unit tests
      run: |
        pytest tests/ -m "unit" --cov=lexgraph_legal_rag --cov-branch \
          --cov-report=xml:coverage.xml --cov-report=term \
          --junitxml=test-results/junit.xml -v
          
    - name: Run integration tests
      run: |
        pytest tests/ -m "integration" --cov=lexgraph_legal_rag --cov-branch \
          --cov-append --cov-report=xml:coverage.xml \
          --junitxml=test-results/integration-junit.xml -v
      env:
        API_KEY: test-api-key
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results/
        retention-days: 30

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
        
    - name: Run safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Semgrep scan
      run: |
        python -m semgrep --config=auto src/ --json --output=semgrep-report.json
      continue-on-error: true
      
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
        retention-days: 30

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: lexgraph-legal-rag:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}
          
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 \
          -e API_KEY=test-key lexgraph-legal-rag:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 25
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg \
          --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | \
          sudo tee /usr/share/keyrings/k6-archive-keyring.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Start application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        nohup python -m uvicorn lexgraph_legal_rag.api:create_api \
          --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        API_KEY: perf-test-key
        
    - name: Run performance tests
      run: |
        k6 run tests/performance/load-test.js \
          --env BASE_URL=http://localhost:8000 \
          --env API_KEY=perf-test-key
          
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          performance-report.json
          performance-summary.html
        retention-days: 30

  # Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Generate SBOM
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: .
        format: spdx-json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: ${{ steps.sbom.outputs.fileName }}
        retention-days: 30

  # Quality Gates
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, build, docker]
    if: always()
    
    steps:
    - name: Check quality gate
      run: |
        if [[ "${{ needs.code-quality.result }}" != "success" || \
              "${{ needs.test.result }}" != "success" || \
              "${{ needs.build.result }}" != "success" || \
              "${{ needs.docker.result }}" != "success" ]]; then
          echo "Quality gate failed"
          exit 1
        fi
        echo "Quality gate passed"
        
    - name: Create summary
      run: |
        echo "## Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY