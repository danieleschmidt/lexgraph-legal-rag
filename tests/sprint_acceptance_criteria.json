{
  "implement-scaffolding-for-multi-agent-architecture-recursive-graph-of-specialized-tools-retriever-summarizer-clause-explainer-that-intelligently-decide-when-to-call-one-another": {
    "test_file": "tests/test_implement-scaffolding-for-multi-agent-architecture-recursive-graph-of-specialized-tools-retriever-summarizer-clause-explainer-that-intelligently-decide-when-to-call-one-another.py",
    "cases": {
      "success": "Asserts the primary success case."
    }
  },
  "add-core-logic-for-multi-agent-architecture-recursive-graph-of-specialized-tools-retriever-summarizer-clause-explainer-that-intelligently-decide-when-to-call-one-another": {
    "test_file": "tests/test_add-core-logic-for-multi-agent-architecture-recursive-graph-of-specialized-tools-retriever-summarizer-clause-explainer-that-intelligently-decide-when-to-call-one-another.py",
    "cases": {
      "success": "Asserts the primary success case."
    }
  },
  "write-unit-tests-covering-success-and-failure-paths-for-multi-agent-architecture-recursive-graph-of-specialized-tools-retriever-summarizer-clause-explainer-that-intelligently-decide-when-to-call-one-another": {
    "test_file": "tests/test_write-unit-tests-covering-success-and-failure-paths-for-multi-agent-architecture-recursive-graph-of-specialized-tools-retriever-summarizer-clause-explainer-that-intelligently-decide-when-to-call-one-another.py",
    "cases": {
      "success": "Asserts the primary success case."
    }
  }
}
