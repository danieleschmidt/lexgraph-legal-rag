name: Fast CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  fast-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Aggressive timeout for fast feedback
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run fast test suite
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        python test_fast_suite.py
    
    - name: Upload coverage to Codecov (optional)
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: fast-tests  # Only run if fast tests pass
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run comprehensive test suite
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        python run_tests_optimized.py
    
    - name: Generate coverage report
      run: |
        pytest --cov=src/lexgraph_legal_rag --cov-report=xml
    
    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: fast-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true