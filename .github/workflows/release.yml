name: Release Management

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease:
        description: 'Create pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  check-changes:
    name: Check for Release-worthy Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_bump: ${{ steps.check.outputs.version_bump }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for conventional commits
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get commits since last tag
            let lastTag;
            try {
              lastTag = execSync('git describe --tags --abbrev=0', { encoding: 'utf8' }).trim();
            } catch {
              lastTag = 'HEAD~10'; // If no tags exist, check last 10 commits
            }
            
            const commits = execSync(`git log --pretty=format:"%s" ${lastTag}..HEAD`, { encoding: 'utf8' })
              .split('\n')
              .filter(line => line.trim());
            
            let shouldRelease = false;
            let versionBump = 'patch';
            
            for (const commit of commits) {
              if (commit.match(/^feat(\(.+\))?!:/)) {
                // Breaking change
                shouldRelease = true;
                versionBump = 'major';
                break;
              } else if (commit.match(/^feat(\(.+\))?:/)) {
                // New feature
                shouldRelease = true;
                if (versionBump === 'patch') versionBump = 'minor';
              } else if (commit.match(/^fix(\(.+\))?:/)) {
                // Bug fix
                shouldRelease = true;
              }
            }
            
            // Override with manual input if provided
            if (context.payload.inputs?.release_type) {
              shouldRelease = true;
              versionBump = context.payload.inputs.release_type;
            }
            
            core.setOutput('should_release', shouldRelease);
            core.setOutput('version_bump', versionBump);
            
            console.log(`Should release: ${shouldRelease}`);
            console.log(`Version bump: ${versionBump}`);

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_release == 'true'
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      released: ${{ steps.semantic.outputs.released }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github
          npm install -g @semantic-release/exec

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "python -c \"import re; content=open('pyproject.toml').read(); content=re.sub(r'version = \"[^\"]*\"', f'version = \\\"{os.environ[\\\"NEXT_RELEASE_VERSION\\\"]}\\\"', content); open('pyproject.toml', 'w').write(content)\""
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "pyproject.toml"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release and capture output
          OUTPUT=$(semantic-release --dry-run 2>&1 || semantic-release 2>&1)
          echo "$OUTPUT"
          
          # Extract version if released
          if echo "$OUTPUT" | grep -q "Published release"; then
            VERSION=$(echo "$OUTPUT" | grep -o "Published release [0-9]*\.[0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*\.[0-9]*")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "released=true" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
          fi

  build-release-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.released == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Get the updated version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Generate checksums
        run: |
          cd dist/
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Upload release assets
        uses: actions/upload-artifact@v3
        with:
          name: release-assets-${{ needs.semantic-release.outputs.version }}
          path: |
            dist/
            CHANGELOG.md

  update-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [semantic-release, build-release-assets]
    if: needs.semantic-release.outputs.released == 'true'
    
    steps:
      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets-${{ needs.semantic-release.outputs.version }}

      - name: Upload assets to release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get the release
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (releases.length === 0) {
              core.setFailed('No recent releases found');
              return;
            }
            
            const release = releases[0];
            
            // Upload distribution files
            const distFiles = fs.readdirSync('dist/');
            for (const file of distFiles) {
              const filePath = path.join('dist', file);
              const content = fs.readFileSync(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: file,
                data: content
              });
              
              console.log(`Uploaded ${file}`);
            }

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [semantic-release, update-release]
    if: needs.semantic-release.outputs.released == 'true'
    
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          message: |
            🎉 New release published!
            
            **LexGraph Legal RAG v${{ needs.semantic-release.outputs.version }}**
            
            📋 [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.semantic-release.outputs.version }})
            📦 [Download](https://github.com/${{ github.repository }}/releases/latest)
            📚 [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create announcement issue
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.semantic-release.outputs.version }}';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📢 Release Announcement: v${version}`,
              body: `
            # 🎉 LexGraph Legal RAG v${version} Released!
            
            We're excited to announce the release of LexGraph Legal RAG v${version}!
            
            ## 📥 Installation
            
            \`\`\`bash
            pip install lexgraph-legal-rag==${version}
            \`\`\`
            
            ## 📋 What's New
            
            Check out the [full changelog](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/CHANGELOG.md) for detailed information about this release.
            
            ## 🐛 Found an Issue?
            
            If you encounter any problems with this release, please [open an issue](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/new/choose).
            
            ## 🙏 Contributors
            
            Thank you to all contributors who made this release possible!
            
            ---
            
            **Links:**
            - 📦 [PyPI Package](https://pypi.org/project/lexgraph-legal-rag/${version}/)
            - 🐳 [Docker Image](https://github.com/${context.repo.owner}/${context.repo.repo}/pkgs/container/lexgraph-legal-rag)
            - 📚 [Documentation](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/README.md)
              `,
              labels: ['announcement', 'release']
            });

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [semantic-release, notify-release]
    if: always()
    
    steps:
      - name: Clean up artifacts
        uses: actions/github-script@v6
        with:
          script: |
            // Clean up old artifacts
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.artifacts.filter(artifact => {
              const createdAt = new Date(artifact.created_at);
              const daysOld = (Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24);
              return daysOld > 30 && artifact.name.startsWith('release-assets-');
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }