name: Dependency Management

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly Monday 6 AM UTC
    - cron: '0 6 1 * *'  # Monthly 1st day 6 AM UTC
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'minor'
        type: choice
        options:
          - security
          - minor
          - major
          - all
      auto_merge:
        description: 'Auto-merge if tests pass'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security Updates
  security-updates:
    name: Security Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 * * 1' || github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety and pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit pip-tools
        
    - name: Check for security vulnerabilities
      id: security-check
      run: |
        echo "Running security checks..."
        
        # Run safety check
        safety check --json --output safety-report.json || true
        
        # Run pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true
        
        # Check if vulnerabilities found
        if [[ -f safety-report.json && $(jq '.vulnerabilities | length' safety-report.json) -gt 0 ]]; then
          echo "security_issues=true" >> $GITHUB_OUTPUT
          echo "Security vulnerabilities found!"
        else
          echo "security_issues=false" >> $GITHUB_OUTPUT
          echo "No security vulnerabilities found."
        fi
        
    - name: Update security dependencies
      if: steps.security-check.outputs.security_issues == 'true'
      run: |
        echo "Updating dependencies with security vulnerabilities..."
        
        # Create updated requirements
        pip-compile --upgrade-package="$(jq -r '.vulnerabilities[].package_name' safety-report.json | tr '\n' ',' | sed 's/,$//')" requirements.in
        
    - name: Create security update PR
      if: steps.security-check.outputs.security_issues == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'fix(deps): update dependencies with security vulnerabilities'
        title: '🔒 Security: Update dependencies with vulnerabilities'
        body: |
          ## Security Dependency Updates
          
          This PR updates dependencies that have known security vulnerabilities.
          
          ### Vulnerabilities Fixed
          
          ```json
          $(cat safety-report.json | jq '.vulnerabilities')
          ```
          
          ### Changes
          - Updated vulnerable packages to secure versions
          - Ran security scans to verify fixes
          
          **Auto-generated by dependency-update workflow**
        branch: security/dependency-updates
        labels: |
          security
          dependencies
          auto-generated
        assignees: ${{ github.actor }}
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  # Minor Updates
  minor-updates:
    name: Minor Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 * * 1' || github.event.inputs.update_type == 'minor' || github.event.inputs.update_type == 'all'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Update Python dependencies
      run: |
        echo "Updating Python dependencies..."
        
        # Backup current requirements
        cp requirements.txt requirements.txt.bak
        
        # Update to latest compatible versions
        pip-compile --upgrade requirements.in
        
        # Check if any updates occurred
        if ! diff -q requirements.txt requirements.txt.bak > /dev/null; then
          echo "Dependencies updated"
          echo "PYTHON_UPDATED=true" >> $GITHUB_ENV
        else
          echo "No Python dependency updates available"
          echo "PYTHON_UPDATED=false" >> $GITHUB_ENV
        fi
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Update Node.js dependencies
      run: |
        echo "Updating Node.js dependencies..."
        
        # Check if package.json exists
        if [[ -f package.json ]]; then
          # Backup current package-lock.json
          cp package-lock.json package-lock.json.bak 2>/dev/null || true
          
          # Update dependencies
          npm update
          
          # Check if any updates occurred
          if ! diff -q package-lock.json package-lock.json.bak > /dev/null 2>&1; then
            echo "Node.js dependencies updated"
            echo "NODE_UPDATED=true" >> $GITHUB_ENV
          else
            echo "No Node.js dependency updates available"
            echo "NODE_UPDATED=false" >> $GITHUB_ENV
          fi
        else
          echo "No package.json found, skipping Node.js updates"
          echo "NODE_UPDATED=false" >> $GITHUB_ENV
        fi
        
    - name: Run tests with updated dependencies
      if: env.PYTHON_UPDATED == 'true' || env.NODE_UPDATED == 'true'
      run: |
        echo "Running tests with updated dependencies..."
        
        # Install updated dependencies
        pip install -r requirements.txt
        
        # Run test suite
        pytest tests/ --tb=short
        
    - name: Create minor update PR
      if: env.PYTHON_UPDATED == 'true' || env.NODE_UPDATED == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore(deps): update dependencies to latest minor versions'
        title: '🔄 Dependencies: Update to latest minor versions'
        body: |
          ## Dependency Updates
          
          This PR updates dependencies to their latest minor versions.
          
          ### Changes
          
          **Python Dependencies**: ${{ env.PYTHON_UPDATED }}
          **Node.js Dependencies**: ${{ env.NODE_UPDATED }}
          
          ### Testing
          - ✅ All tests pass with updated dependencies
          - ✅ No breaking changes detected
          
          ### Review Notes
          - This is an automated update to keep dependencies current
          - Only minor version updates are included (no breaking changes)
          - All tests have been verified to pass
          
          **Auto-generated by dependency-update workflow**
        branch: deps/minor-updates
        labels: |
          dependencies
          enhancement
          auto-generated
        assignees: ${{ github.actor }}

  # Major Updates
  major-updates:
    name: Major Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 1 * *' || github.event.inputs.update_type == 'major' || github.event.inputs.update_type == 'all'
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Check for major updates
      id: major-check
      run: |
        echo "Checking for available major updates..."
        
        # Check for outdated packages
        pip list --outdated --format=json > outdated.json
        
        # Filter for major version updates
        python << 'EOF'
        import json
        import re
        
        with open('outdated.json', 'r') as f:
            outdated = json.load(f)
        
        major_updates = []
        for pkg in outdated:
            current = pkg['version']
            latest = pkg['latest_version']
            
            # Parse version numbers
            current_major = int(re.split(r'[.-]', current)[0])
            latest_major = int(re.split(r'[.-]', latest)[0])
            
            if latest_major > current_major:
                major_updates.append({
                    'name': pkg['name'],
                    'current': current,
                    'latest': latest
                })
        
        with open('major_updates.json', 'w') as f:
            json.dump(major_updates, f, indent=2)
        
        print(f"Found {len(major_updates)} major updates available")
        EOF
        
        if [[ $(jq 'length' major_updates.json) -gt 0 ]]; then
          echo "major_updates=true" >> $GITHUB_OUTPUT
        else
          echo "major_updates=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create major update issue
      if: steps.major-check.outputs.major_updates == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore(deps): track major dependency updates'
        title: '🔄 Major Dependency Updates Available'
        body: |
          ## Major Dependency Updates Available
          
          The following packages have major version updates available that may contain breaking changes:
          
          ```json
          $(cat major_updates.json)
          ```
          
          ### Action Required
          
          These updates require manual review due to potential breaking changes:
          
          1. Review changelog for each package
          2. Update code if necessary for compatibility
          3. Run comprehensive tests
          4. Update documentation if APIs have changed
          
          ### Next Steps
          
          - [ ] Review each major update individually
          - [ ] Test compatibility in development environment
          - [ ] Update code for any breaking changes
          - [ ] Run full test suite
          - [ ] Update documentation
          
          **Auto-generated by dependency-update workflow**
        branch: deps/major-updates-tracking
        labels: |
          dependencies
          breaking-change
          manual-review
          auto-generated
        assignees: ${{ github.actor }}

  # Dependency Audit
  dependency-audit:
    name: Dependency Audit and Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install audit tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit pipdeptree licensecheck
        
    - name: Run comprehensive dependency audit
      run: |
        echo "Running dependency audit..."
        
        # Generate dependency tree
        pipdeptree --json > dependency-tree.json
        
        # License check
        licensecheck --zero > license-report.txt || true
        
        # Vulnerability scan
        pip-audit --format=json --output=vulnerability-scan.json || true
        
        # Package health check
        python << 'EOF'
        import json
        import requests
        import time
        from datetime import datetime, timedelta
        
        with open('dependency-tree.json', 'r') as f:
            deps = json.load(f)
        
        health_report = []
        
        for dep in deps:
            if dep['package']['package_name'] == 'pip':
                continue
                
            try:
                # Get package info from PyPI
                response = requests.get(f"https://pypi.org/pypi/{dep['package']['package_name']}/json")
                if response.status_code == 200:
                    data = response.json()
                    
                    # Check last release date
                    releases = list(data['releases'].keys())
                    if releases:
                        latest_release = max(releases)
                        upload_time = data['releases'][latest_release][0]['upload_time_iso_8601']
                        last_update = datetime.fromisoformat(upload_time.replace('Z', '+00:00'))
                        days_since_update = (datetime.now().replace(tzinfo=last_update.tzinfo) - last_update).days
                        
                        health_report.append({
                            'name': dep['package']['package_name'],
                            'version': dep['package']['installed_version'],
                            'latest': latest_release,
                            'days_since_update': days_since_update,
                            'maintainer_count': len(data['info']['maintainer_email'].split(',')) if data['info']['maintainer_email'] else 0,
                            'download_count': data['info'].get('download_url', 'N/A')
                        })
                
                time.sleep(0.1)  # Rate limiting
            except Exception as e:
                print(f"Error checking {dep['package']['package_name']}: {e}")
        
        with open('health-report.json', 'w') as f:
            json.dump(health_report, f, indent=2)
        EOF
        
    - name: Generate dependency report
      run: |
        echo "# Dependency Health Report" > dependency-report.md
        echo "" >> dependency-report.md
        echo "Generated: $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        
        echo "## Vulnerability Summary" >> dependency-report.md
        if [[ -f vulnerability-scan.json ]]; then
          vuln_count=$(jq '.vulnerabilities | length' vulnerability-scan.json)
          echo "- Vulnerabilities found: $vuln_count" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        
        echo "## License Summary" >> dependency-report.md
        if [[ -f license-report.txt ]]; then
          echo "\`\`\`" >> dependency-report.md
          head -20 license-report.txt >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        
        echo "## Package Health" >> dependency-report.md
        echo "| Package | Version | Latest | Days Since Update | Health |" >> dependency-report.md
        echo "|---------|---------|--------|--------------------|--------|" >> dependency-report.md
        
        if [[ -f health-report.json ]]; then
          jq -r '.[] | select(.days_since_update > 365) | "| \(.name) | \(.version) | \(.latest) | \(.days_since_update) | ⚠️ Stale |"' health-report.json >> dependency-report.md
          jq -r '.[] | select(.days_since_update <= 365) | "| \(.name) | \(.version) | \(.latest) | \(.days_since_update) | ✅ Good |"' health-report.json >> dependency-report.md
        fi
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-reports
        path: |
          dependency-tree.json
          license-report.txt
          vulnerability-scan.json
          health-report.json
          dependency-report.md
        retention-days: 90
        
    - name: Comment on issues if problems found
      if: always()
      run: |
        echo "Dependency audit completed"
        # Add logic to create issues for critical problems

  # Auto-merge approved updates
  auto-merge:
    name: Auto-merge Dependency Updates
    runs-on: ubuntu-latest
    needs: [security-updates, minor-updates]
    if: github.event.inputs.auto_merge == 'true' && (needs.security-updates.result == 'success' || needs.minor-updates.result == 'success')
    timeout-minutes: 10
    
    steps:
    - name: Enable auto-merge for dependency PRs
      run: |
        echo "Enabling auto-merge for dependency update PRs"
        # Add auto-merge logic here using GitHub CLI or API
        
    - name: Monitor PR status
      run: |
        echo "Monitoring PR status for auto-merge"
        # Add monitoring logic

  # Summary Report
  summary:
    name: Dependency Update Summary
    runs-on: ubuntu-latest
    needs: [security-updates, minor-updates, major-updates, dependency-audit]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Create summary
      run: |
        echo "## 📦 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Results" >> $GITHUB_STEP_SUMMARY
        echo "| Update Type | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Updates | ${{ needs.security-updates.result }} | Critical security patches |" >> $GITHUB_STEP_SUMMARY
        echo "| Minor Updates | ${{ needs.minor-updates.result }} | Compatible version updates |" >> $GITHUB_STEP_SUMMARY
        echo "| Major Updates | ${{ needs.major-updates.result }} | Breaking change analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| Audit | ${{ needs.dependency-audit.result }} | Health and compliance check |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Resources" >> $GITHUB_STEP_SUMMARY
        echo "- [Dependency Policy](docs/DEPENDENCY_POLICY.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Security Guidelines](SECURITY.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Change Log](CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY