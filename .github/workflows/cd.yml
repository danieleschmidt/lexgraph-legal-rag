name: Continuous Deployment

on:
  release:
    types: [published]
  push:
    branches: [main]
    tags: ['v*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  build-and-publish:
    name: Build & Publish Package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-${{ github.sha }}
          path: dist/

  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging-lexgraph.terragon.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: Deploy to staging
        run: |
          kubectl set image deployment/lexgraph-api \
            lexgraph-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
            -n staging
          kubectl rollout status deployment/lexgraph-api -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available deployment/lexgraph-api -n staging --timeout=300s
          
          # Get the staging URL
          STAGING_URL=$(kubectl get ingress lexgraph-ingress -n staging -o jsonpath='{.spec.rules[0].host}')
          
          # Run basic health checks
          curl -f https://$STAGING_URL/health || exit 1
          curl -f https://$STAGING_URL/metrics || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, build-and-publish]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://lexgraph.terragon.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Deploy to production
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Update production deployment
          kubectl set image deployment/lexgraph-api \
            lexgraph-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION \
            -n production
          
          # Wait for rollout to complete
          kubectl rollout status deployment/lexgraph-api -n production --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available deployment/lexgraph-api -n production --timeout=600s
          
          # Get the production URL
          PROD_URL=$(kubectl get ingress lexgraph-ingress -n production -o jsonpath='{.spec.rules[0].host}')
          
          # Run comprehensive health checks
          curl -f https://$PROD_URL/health || exit 1
          curl -f https://$PROD_URL/metrics || exit 1
          
          # Test basic API functionality
          curl -f -H "X-API-Key: ${{ secrets.PROD_API_KEY }}" \
            "https://$PROD_URL/api/v1/search?q=test" || exit 1

      - name: Create deployment record
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: `Deployed ${context.ref} to production`,
              auto_merge: false
            });

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: '🚀 Successfully deployed LexGraph Legal RAG to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: '❌ Production deployment failed for LexGraph Legal RAG'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-production]
    environment:
      name: production-rollback

    steps:
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/lexgraph-api -n production
          kubectl rollout status deployment/lexgraph-api -n production --timeout=300s

      - name: Verify rollback
        run: |
          kubectl wait --for=condition=available deployment/lexgraph-api -n production --timeout=300s
          PROD_URL=$(kubectl get ingress lexgraph-ingress -n production -o jsonpath='{.spec.rules[0].host}')
          curl -f https://$PROD_URL/health || exit 1