name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          pip install -e .

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v3
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
          pip install -e .

      - name: Run Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-report
          path: semgrep-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t lexgraph-security-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lexgraph-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: lexgraph-security-scan:latest
          sarif-file: scout-report.sarif

      - name: Upload Docker Scout scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scout-report.sarif

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck
          pip install -e .

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          licensecheck --zero

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  sbom-generation:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom
          pip install -e .

      - name: Generate SBOM
        run: |
          cyclonedx-py -o sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: software-bill-of-materials
          path: sbom.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-scan, container-scan, license-scan, sbom-generation]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          cat > security-summary.md << 'EOF'
          # Security Scan Summary
          
          ## Scan Results
          
          | Scan Type | Status | Artifacts |
          |-----------|--------|-----------|
          | Dependency Vulnerabilities | ${{ needs.dependency-scan.result }} | safety-report.json, pip-audit-report.json |
          | Secret Detection | ${{ needs.secret-scan.result }} | TruffleHog scan completed |
          | Static Analysis | ${{ needs.sast-scan.result }} | bandit-report.json, semgrep-report.json |
          | Container Security | ${{ needs.container-scan.result }} | trivy-results.sarif |
          | License Compliance | ${{ needs.license-scan.result }} | licenses.json |
          | SBOM Generation | ${{ needs.sbom-generation.result }} | sbom.json |
          
          ## Next Steps
          
          1. Review all security scan reports in the artifacts
          2. Address any high/critical vulnerabilities found
          3. Update dependencies with security patches
          4. Verify license compliance for all dependencies
          
          Generated on: $(date -u)
          Commit: ${{ github.sha }}
          EOF

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${summary}\n\nPlease review the security scan artifacts for detailed findings.`
            });

  compliance-check:
    name: Compliance Verification
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify security policy compliance
        run: |
          # Check for required security files
          test -f SECURITY.md || (echo "SECURITY.md is required" && exit 1)
          test -f .github/SECURITY.md || test -f SECURITY.md || (echo "Security policy not found" && exit 1)
          
          # Check for vulnerability disclosure process
          grep -i "security" README.md || (echo "Security section missing in README" && exit 1)
          
          # Verify pre-commit hooks are configured
          test -f .pre-commit-config.yaml || (echo "Pre-commit hooks not configured" && exit 1)

      - name: Check branch protection
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: branch } = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main'
              });
              
              if (!branch.protection) {
                core.setFailed('Main branch protection is not enabled');
              }
              
              if (!branch.protection.required_status_checks) {
                core.setFailed('Required status checks are not configured');
              }
            } catch (error) {
              core.setFailed(`Failed to check branch protection: ${error.message}`);
            }