[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lexgraph_legal_rag"
version = "1.0.0"
description = "LangGraph-powered multi-agent legal document analysis system"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Terragon Labs", email = "dev@terragon.dev"}
]
maintainers = [
    {name = "Terragon Labs", email = "dev@terragon.dev"}
]
keywords = [
    "legal", "rag", "ai", "langgraph", "multi-agent", 
    "semantic-search", "document-analysis", "legal-tech", "nlp"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Legal Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Office/Business :: Legal",
]
dependencies = [
    "scikit-learn==1.7.0",
    "fastapi==0.115.14",
    "httpx==0.28.1",
    "faiss-cpu==1.11.0",
    "structlog==24.1.0",
    "prometheus-client==0.20.0",
    "streamlit==1.47.1",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.4.6",
    "black>=24.4.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.1",
    "pip-tools>=7.4.0",
]
security = [
    "bandit[toml]>=1.7.8",
    "safety>=3.2.0",
    "pip-audit>=2.6.0",
    "detect-secrets>=1.4.0",
]
performance = [
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]
all = ["lexgraph_legal_rag[dev,security,performance,docs]"]

[project.urls]
Homepage = "https://github.com/terragon-labs/lexgraph-legal-rag"
Documentation = "https://github.com/terragon-labs/lexgraph-legal-rag/blob/main/README.md"
Repository = "https://github.com/terragon-labs/lexgraph-legal-rag.git"
Issues = "https://github.com/terragon-labs/lexgraph-legal-rag/issues"
Changelog = "https://github.com/terragon-labs/lexgraph-legal-rag/blob/main/CHANGELOG.md"

[project.scripts]
lexgraph = "lexgraph_legal_rag.cli:main"
lexgraph-ingest = "lexgraph_legal_rag.ingest:main"
lexgraph-serve = "lexgraph_legal_rag.api:main"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["lexgraph_legal_rag"]

[tool.setuptools.package-data]
lexgraph_legal_rag = ["py.typed", "data/*", "templates/*"]

# Testing Configuration
[tool.pytest.ini_options]
addopts = "-ra --cov=lexgraph_legal_rag --cov-branch --cov-fail-under=80 --cov-report=term-missing --cov-report=html --cov-report=xml"
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "performance: Performance tests",
    "security: Security tests",
    "smoke: Smoke tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
xfail_strict = true
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Code Formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# Linting Configuration
[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src", "tests"]
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs", 
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit security
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (allow in tests)
    "S104",  # hardcoded bind all interfaces
    "S301",  # pickle usage
    "T201",  # print statements (allow in CLI tools)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S106", "S311", "PLR2004"]
"src/lexgraph_legal_rag/cli.py" = ["T201"]
"scripts/**/*" = ["T201", "S602"]

[tool.ruff.lint.isort]
known-first-party = ["lexgraph_legal_rag"]
force-single-line = true
lines-after-imports = 2

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

# Type Checking
[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = false
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "streamlit.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Coverage Configuration  
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/tests/*", 
    "test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101"]  # assert_used - allow in tests

[tool.bandit.assert_used]
skips = ["*/tests/*", "*/test_*.py"]

# Build Configuration
[tool.setuptools_scm]
write_to = "src/lexgraph_legal_rag/_version.py"
version_scheme = "python-simplified-semver"
local_scheme = "dirty-tag"
fallback_version = "0.0.0+unknown"