[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "lexgraph_legal_rag"
version = "1.0.0"
requires-python = ">=3.8"
dependencies = [
    "scikit-learn==1.7.0",
    "fastapi==0.115.14",
    "httpx==0.28.1",
    "faiss-cpu==1.11.0",
    "structlog==24.1.0",
    "prometheus-client==0.20.0",
    "streamlit==1.33.0",
    "psutil>=5.9.0",
]

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["lexgraph_legal_rag"]

[tool.pytest.ini_options]
addopts = "-ra --cov=lexgraph_legal_rag --cov-branch --cov-fail-under=80"
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # allow assert in tests

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
