version: '3.8'

services:
  # Main application
  lexgraph-api:
    build:
      context: .
      target: production
    ports:
      - "8000:8000"
    environment:
      - API_KEY=${API_KEY:-secure-production-key}
      - ENVIRONMENT=production
      - METRICS_PORT=8001
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - PINECONE_API_KEY=${PINECONE_API_KEY:-}
      - LEGAL_CORPUS_PATH=/app/data/legal_docs
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lexgraph-network
    depends_on:
      - redis

  # Redis for caching (optional enhancement)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - lexgraph-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - lexgraph-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - lexgraph-network
    depends_on:
      - prometheus

  # Development environment
  lexgraph-dev:
    build:
      context: .
      target: development
    ports:
      - "8080:8000"
      - "8081:8001"
    environment:
      - API_KEY=${API_KEY:-development-key}
      - ENVIRONMENT=development
      - METRICS_PORT=8001
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - lexgraph-network
    profiles:
      - development

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  lexgraph-network:
    driver: bridge